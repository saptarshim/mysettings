	C-f	Move forward a character
	C-b	Move backward a character
	C-l	Redraw the window and center
	
	C-g	Cancel all pending commands

	M-f	Move forward a word
	M-b	Move backward a word

	C-n	Move to next line
	C-p	Move to previous line

	C-a	Move to beginning of line
	C-e	Move to end of line

	M-a	Move back to beginning of sentence
	M-e	Move forward to end of sentence
	<Delback>    Delete the character just before the cursor
	C-d   	     Delete the next character after the cursor

	M-<Delback>  Kill the word immediately before the cursor
	M-d	     Kill the next word after the cursor

	C-k	     Kill from the cursor position to end of line
	M-k	     Kill to the end of the current sentence
	C-Y	     Yank the killed lone
	M-w	     Copy	
	C-w	     Cut
	C-x C-f		Find file
	C-x C-s		Save file
	C-x s		Save some buffers
	C-x C-b		List buffers
	C-x b		Switch buffer
	C-x C-c		Quit Emacs
	C-x 1		Expand the current buffer to fill the screen
	C-x u		Undo
	C /		Undo
	C-x d		Open Directory
	C-h m		Documentation on the current mode
	M-x text-mode	Changes the current mode of the Emacs to Text processing mode
	M-x auto-fill-mode Minor mode within Text Major mode for better writing test

	SEARCH
	C-s		Search forward incremental
	C-r		Search backward Incremental
	C-s C-s	Search for most recently searched item
	C-s M-p	Previous item in search history
	C-s M-n	Next item in search history
	C-h k C-s	Guide to more commands available in incremental search

	
	WINDOW
	C-x 2		Split the current window in two
	C-M-v		Scroll the other windows
	C-x o		Move cursor to the other window
	C-x 1		Get rid of all the window except where the cursor currently is
	C-x 4 C-f	Open a file in another window

 	M-x rgrep	Search the directory with what is below the cursor


	M-/ 		 (dabbrev-expand) which expands the previous word by looking for the most recent word that matches	

You can read the man page for an operating system command, 
library function, or system call, with the M-x manual-entry command	

Org Mode related commands
	M-RET		Insert new Heading at the same level
	M-SHIFT-RET	Insert TODO
	C-c C-t 	Close the TODO
	SHIFT-TAB	Cycle through Heading Indentation level
	[[Hyperlink][hyperlink Text Description]] This will collapse the hyperlink and
	 replace with the text description
	C-c C-s		Will open the calender from where we can choose the date to be inserted in document
	C-c a a 	Org agenda after the document is created
	|Text followed by TAB will create a table
	|-		Create horizontal separator



	C-x h		Select All
	M-h 		Select Current paragraph


;;------------------------ Spelling related KBD shortcuts

Checking and Correcting Spelling

This section describes the commands to check the spelling of a single word or of a portion
of a buffer. These commands only work if the spelling checker program Aspell, Ispell or 
Hunspell is installed. Aspell, Ispell or Hunspell are not part of Emacs, but one or the
other is usually installed in GNU/Linux and other free operating systems. See Aspell.

M-$   	 Check and correct spelling of the active region or the word at point (ispell-word). 
M-x ispell     Check and correct spelling in the active region or the entire buffer. 
M-x ispell-buffer    Check and correct spelling in the buffer. 
M-x ispell-region    Check and correct spelling in the region. 
M-x ispell-message   Check and correct spelling in a draft mail message, excluding cited material. 
M-x ispell-change-dictionary <RET> dict <RET>
Restart the Aspell/Ispell/Hunspell process, using dict as the dictionary. 
M-x ispell-kill-ispell
Kill the Aspell/Ispell/Hunspell subprocess. 
M-<TAB>
<ESC> <TAB>
Complete the word before point based on the spelling dictionary (ispell-complete-word). 
M-x flyspell-mode
Enable Flyspell mode, which highlights all misspelled words. 
M-x flyspell-prog-mode
Enable Flyspell mode for comments and strings only.


-------------------------------------------------------------------------------------
Programmng related commands
-------------------------------------------------------------------------------------
C-c C-c	comment-region
C-M-a		c-beginning-of-defun
C-M-e		c-end-of-defun
C-M-h		c-mark-function
C-M-j		c-indent-new-comment-line
C-M-q		c-indent-exp
M-a		c-beginning-of-statement
M-e		c-end-of-statement



-------------------------------------------------------------------------------------
Getteing Help
------------------------------------------------------------------------------------
C-h m				Show the help of te current mode
C-h k <key Sequence>	Show help on what the key sequence does	

Testing VC

VC. I use Git for all my personal projects, and occasionally CVS and SVN for projects that I interact with. Emacs provides a package called VC which lets me perform many version control operations from within Emacs. It provides a layer of uniformity: the commands are all the same regardless of what version control system I am using for any particular project. This is great because it means that when bzr or hg or whatever comes into vogue, I can get quite a bit of work done before I have to learn yet another VCS.

Typical workflow for me: open a file. Make and test some changes. C-x v = to show a diff. If I like it, C-x v v to prepare a commit. Emacs pops up a new window in which to type a commit message. C-c C-c there to make the commit.

VC includes many other useful features, like showing annotated versions of files, showing change logs for particular files, and helping you review historical versions and diffs.


---------------Git Emacs Integration related command-----------------------
C-x g l		   Log for entire project
C-x g L	Log for current file
C-x g C-l   	Log for Branch or tag
C-x g d RET 	Diff current buffer against HEAD
C-x g s	Status	   
C-c g c f	   Commit Current File